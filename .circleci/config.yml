version: 2
jobs:
  build:
    docker:
      - image: ubuntu:16.04
    working_directory: ~/src/CoreDataStore.Web
    environment:
      - NG_ENVIRONMENT: "Stage"
      - LANDMARK : "https://coredatastore.com/api/"
      - ATTRACTION : "https://api-attractions.navigatorglass.com/api/"
      - MAPSAPI : "https://api-maps.navigatorglass.com/"
      - REPORTSAPI: "https://reports.coredatastore.com/api/"
      - LOCATIONAPI: "https://api-location.coredatastore.com/api/"
    steps:
      - checkout
      - run: 
          name: Install Ubuntu Build Packages
          command: |
            apt update
            apt install -y curl git apt-transport-https unzip libunwind8 gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev
      - setup_remote_docker
      # use a primary image that already has Docker (recommended)
      # or install it during a build like we do here
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Install NodeJS v6
          command: |
            curl -sL https://deb.nodesource.com/setup_6.x | bash -
            apt update
            apt install -y nodejs
      - run:
          name: Install .NET Core
          command: |
            sh -c 'echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main" > /etc/apt/sources.list.d/dotnetdev.list'
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893
            apt update
            apt install -y dotnet-sdk-2.0.0-preview2-006497
      - run: 
          name: Restore and publish .NET
          command: |
            dotnet --info
            dotnet restore  
            ( cd src/CoreDataStore.Web ; dotnet setversion 1.0.19.$CIRCLE_BUILD_NUM; )
            dotnet publish src/CoreDataStore.Web/CoreDataStore.Web.csproj -c Release -f netcoreapp2.0 -r debian.8-x64
      - run:
          name: Pull and Test coredatastore-postgres
          command: |
            docker pull stuartshay/coredatastore-postgres:stable
            docker run -d --name database -p 5432:5432 stuartshay/coredatastore-postgres:stable 
            docker ps
            docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' database
            # dotnet test test/CoreDataStore.Data.Postgre.Test/CoreDataStore.Data.Postgre.Test.csproj
      - run:
          name: Build and bundle from source
          command: |
            ( cd src/CoreDataStore.Web ; npm i; npm run clean ; npm run build )
      - run:
          name: Build and push Docker image
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker build -f docker/runtime.dockerfile -t stuartshay/coredatastore:2.0-runtime .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push stuartshay/coredatastore:2.0-runtime
          # docker build -f docker/runtime.dockerfile -t stuartshay/coredatastore:$TAG .
          # docker push stuartshay/coredatastore:$TAG
      - save_cache:
          key: v1-coredatastore-{{ checksum ".circleci/config.yml" }}
          paths:
            - ~/.caches
            - ~/.nuget
            - ~/.npm

  deploy:
    docker:
      - image: alpine

    environment:
      - RANCHER_COMPOSE_VERSION: '0.12.5'
      - STACK_NAME: 'CoreDataStore-QA'
      - DOCKER_COMPOSE: 'docker/rancher-qa-stack/docker-compose.yml'
      - RANCHER_COMPOSE: 'docker/rancher-qa-stack/rancher-compose.yml'
      - UPGRADE_SERVICES: 'coredatastore-reporting-api'

    steps:
      - checkout

      - run:
          name: Install Rancher Compose
          command: |
            apk -U add curl
            curl -sSL https://github.com/rancher/rancher-compose/releases/download/v${RANCHER_COMPOSE_VERSION}/rancher-compose-linux-amd64-v${RANCHER_COMPOSE_VERSION}.tar.gz \
              | tar -zxf - --strip-components=2 -C /usr/local/bin

      - run:
          name: Create all services but do not start
          command: |
            rancher-compose -f ${DOCKER_COMPOSE} -r ${RANCHER_COMPOSE} -p ${STACK_NAME} create

      - run:
          name: Bring all services up
          command: |
            rancher-compose -f ${DOCKER_COMPOSE} -r ${RANCHER_COMPOSE} -p ${STACK_NAME} up -d

      - run:
          name: Perform services upgrade (coredatastore-reporting-api)
          command: |
            rancher-compose \
              -f ${DOCKER_COMPOSE} \
              -r ${RANCHER_COMPOSE} \
              -p ${STACK_NAME} \
              --verbose up --upgrade --pull -d ${UPGRADE_SERVICES}
